
require 'bundler/gem_tasks'
begin
  Bundler.setup
rescue Bundler::BundlerError => e
  $stderr.puts e.message
  $stderr.puts 'Run `bundle install` to install missing gems'
  exit e.status_code
end

require 'rake/testtask'
desc 'Run the weather file tests'
Rake::TestTask.new('test:weather') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_weather.rb']
end

require 'rake/testtask'
desc 'Run the compliance file tests'
Rake::TestTask.new('test:compliance') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_compliance.rb']
end

require 'rake/testtask'
desc 'Run test PRM'
Rake::TestTask.new('test:prm') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_create_prm_dummy_office.rb' # Takes about a minute for me
  ]
end

require 'rake/testtask'
desc 'Run test group 0'
Rake::TestTask.new('test:gem_group_0') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_find_ashrae_hot_water_demand.rb',
  'openstudio-standards/test/test_find_construction_properties_data.rb',
  'openstudio-standards/test/test_find_space_type_standards_data.rb',
  'openstudio-standards/test/test_find_target_eui.rb',
  'openstudio-standards/test/test_find_target_eui_by_end_use.rb',
  'openstudio-standards/test/test_primary_school.rb', # 9 min
  'openstudio-standards/test/test_warehouse.rb',
  'openstudio-standards/test/test_necb_airloop_sizing_parameters.rb',
  'openstudio-standards/test/test_necb_boiler_rules.rb',
  'openstudio-standards/test/test_necb_buildings.rb',
  'openstudio-standards/test/test_necb_chiller_rules.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 1'
Rake::TestTask.new('test:gem_group_1') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_secondary_school.rb', # 70 min
  'openstudio-standards/test/test_medium_office.rb',
  'openstudio-standards/test/test_mid_rise_apartment.rb', # 7 min
  'openstudio-standards/test/test_high_rise_apartment.rb', # 7 min
  # 'openstudio-standards/test/test_outpatient.rb' #
  'openstudio-standards/test/test_necb_constructions_fdwr.rb',
  'openstudio-standards/test/test_necb_coolingtower_rules.rb',
  'openstudio-standards/test/test_necb_default_spacetypes.rb',
  'openstudio-standards/test/test_necb_default_system_selection.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 2'
Rake::TestTask.new('test:gem_group_2') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_large_hotel.rb', # 5 min
  'openstudio-standards/test/test_large_office.rb', # 4 min
  'openstudio-standards/test/test_quick_service_restaurant.rb', # 1 min
  'openstudio-standards/test/test_strip_mall.rb', # 2 min
  'openstudio-standards/test/test_necb_fan_rules.rb',
  'openstudio-standards/test/test_necb_heatpump_rules.rb',
  'openstudio-standards/test/test_necb_hrv_rules.rb',
  'openstudio-standards/test/test_necb_hvac_systems.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 3'
Rake::TestTask.new('test:gem_group_3') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_small_hotel.rb', # 80 min
  'openstudio-standards/test/test_retail_standalone.rb', # 6 min
  'openstudio-standards/test/test_full_service_restaurant.rb', # 10 min
  'openstudio-standards/test/test_small_office.rb', # 7 min
  'openstudio-standards/test/test_necb_loop_rules.rb',
  'openstudio-standards/test/test_necb_unitary_rules.rb',
  'openstudio-standards/test/test_necb_waterheater_rules.rb',
  'openstudio-standards/test/test_necb_weather.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 4'
Rake::TestTask.new('test:gem_group_4') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_create_performance_rating_method_baseline_building.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 5'
Rake::TestTask.new('test:gem_group_5') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_create_performance_rating_method_baseline_bldg_2.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 6'
Rake::TestTask.new('test:gem_group_6') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_create_performance_rating_method_baseline_bldg_3.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 7'
Rake::TestTask.new('test:gem_group_7') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_boiler_hot_water.rb',
  'openstudio-standards/test/test_chiller_electric_eir.rb',
  'openstudio-standards/test/test_coil_dx.rb',
  'openstudio-standards/test/test_get_building_climate_zone_and_building_type.rb'
  ]
end

require 'rake/testtask'
desc 'Run the NECB 2011 Building Type Tests'
Rake::TestTask.new('test:necb-buildings') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_create_necb_buildings.rb']
end

require 'rake/testtask'
desc 'Run the NECB 2011 HVAC Tests'
Rake::TestTask.new('test:necb-hvac') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_create_necb_hvac.rb']
end

require 'rake/testtask'
desc 'Run the measure tests'
Rake::TestTask.new('test:large_office') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_one_building_office_2010.rb']
end

require 'rake/testtask'
desc 'Run the measure tests'
Rake::TestTask.new('test:one_building') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_one_building.rb']
end

require 'rake/testtask'
desc 'Run the measure tests'
Rake::TestTask.new('test:gem') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_*.rb']
end

require 'rake/testtask'
desc 'Run the measure tests'
Rake::TestTask.new('test:measures') do |task|
  task.test_files = FileList[
  # TOO LONG 'measures/apply_system1/tests/full_hvac_test.rb',
  'measures/btap_apply_necb_rules/tests/apply_necb_rules_Test.rb',
  # TOO LONG 'measures/btap_campus_classic/tests/btap_coldlake_classic_test.rb',
  'measures/btap_change_building_location/tests/btap_change_location_test.rb',
  'measures/btap_create_doe_necb_models/tests/DOE2NECB_Model_Test.rb',
  'measures/btap_equest_converter/tests/btap_equest_converter_test.rb',
  'measures/btap_replace_model/tests/ReplaceModel_Test.rb',
  'measures/btap_set_default_construction_set/tests/set_default_construction_set_test.rb',
  # TOO Long 'measures/create_DOE_prototype_building/tests/create_DOE_prototype_building_test.rb',
  'measures/UtilityTariffs/tests/UtilityTariffs_Test.rb'
  ]
end

desc 'Run all tests'
task 'test:all' => ['test:prm', 'test:gem', 'test:measures']

require "#{File.dirname(__FILE__)}/data/standards/manage_OpenStudio_Standards.rb"
desc 'Download OpenStudio_Standards from Google & export JSONs'
task 'data:update' do
  download_google_spreadsheet
  export_spreadsheet_to_json
end

task 'data:update:manual' do
  export_spreadsheet_to_json
end

require 'yard'
desc 'Generate the documentation'
YARD::Rake::YardocTask.new(:doc) do |task|
  Dir.chdir('../')
  task.stats_options = ['--list-undoc']
end

desc 'Show the documentation in a web browser'
task 'doc:show' => [:doc] do
  link = "#{Dir.pwd}/openstudio-standards/doc/index.html"
  if RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/
    system "start #{link}"
  elsif RbConfig::CONFIG['host_os'] =~ /darwin/
    system "open #{link}"
  elsif RbConfig::CONFIG['host_os'] =~ /linux|bsd/
    system "xdg-open #{link}"
  end
end

require 'rubocop/rake_task'
desc 'Check the code for style consistency'
RuboCop::RakeTask.new(:rubocop) do |task|
  # Make a folder for the output
  out_dir = 'openstudio-standards/.rubocop'
  Dir.mkdir(out_dir) unless File.exist?(out_dir)
  # Output both XML (CheckStyle format) and HTML
  task.options = ["--out=#{out_dir}/rubocop-results.xml", '--format=h', "--out=#{out_dir}/rubocop-results.html", '--format=offenses', "--out=#{out_dir}/rubocop-summary.txt"]
  task.requires = ['rubocop/formatter/checkstyle_formatter']
  task.formatters = ['RuboCop::Formatter::CheckstyleFormatter']
  # don't abort rake on failure
  task.fail_on_error = false
end

desc 'Build, install, test gem & measures'
task btest: [:install, 'test:all']

task default: :btest
