
require 'bundler/gem_tasks'
begin
    Bundler.setup
rescue Bundler::BundlerError => e
    $stderr.puts e.message
    $stderr.puts 'Run `bundle install` to install missing gems'
    exit e.status_code
end

require 'rake/testtask'
namespace :test do
    full_file_list = nil
    if  File.exist?("test/circleci_tests.txt")
    #load test files from file. 
    full_file_list = FileList.new(File.readlines('test/circleci_tests.txt'))
    #Select only .rb files that exist 
    full_file_list.select! { |item| item.include?('rb') && File.exist?(File.absolute_path("test/#{item.strip}")) }
    full_file_list.map! { |item| File.absolute_path("test/#{item.strip}") }
    else
        puts "Could not find list of files to test at test/circleci_tests.txt"
        return false
    end

    desc 'Run the weather file tests'
    Rake::TestTask.new('weather') do |t|
        t.libs << 'test'
        t.test_files = FileList['openstudio-standards/test/necb/test_weather.rb']
    end

    desc 'Run the compliance file tests'
    Rake::TestTask.new('compliance') do |t|
        t.libs << 'test'
        t.test_files = FileList['openstudio-standards/test/necb/test_compliance.rb']
    end
    ['90_1_prm','90_1_general','doe_prototype','necb'].each do |type|
        desc "Manual Run CircleCI tests #{type}"
        Rake::TestTask.new("circ-#{type}") do |t|
            array = full_file_list.select { |item| item.include?("#{type}") }
            t.libs << 'test'
            t.test_files = array
        end
    end

    # These tests only available in the CI environment
    if ENV['CI'] == 'true'

        desc 'Run CircleCI tests'
        Rake::TestTask.new('circleci') do |t|
            # Create a FileList for this task
            test_list = FileList.new
            # Read the parallelized list of tests
            # created by the circleci CLI in config.yml
            if File.exist?("../node_tests.txt")
                File.open("../node_tests.txt", "r") do |f|
                    f.each_line do |line|
                        # Skip comments the CLI may have included
                        next unless line.include?('.rb')
                        # Remove whitespaces
                        line = line.strip
                        # Ensure the file exists
                        pth = File.absolute_path("test/#{line}")
                        unless File.exist?(pth)
                            puts "Skipped #{line} because this file doesn't exist"
                            next
                        end
                        # Add this test to the list
                        test_list.add(pth)
                    end
                end
                # Assign the tests to this task
                t.test_files = test_list
            else
                puts "Could not find parallelized list of CI tests."
            end
        end

        desc 'Summarize the test timing'
        task 'times' do |t|
            require 'nokogiri'

            files_to_times = {}
            tests_to_times = {}
            Dir['test/reports/*.xml'].each do |xml|
                doc = File.open(xml) { |f| Nokogiri::XML(f) }
                doc.css('testcase').each do |testcase|
                    time = testcase.attr('time').to_f
                    file = testcase.attr('file')
                    name = testcase.attr('name')
                    # Add to total for this file
                    if files_to_times[file].nil?
                        files_to_times[file] = time
                    else
                        files_to_times[file] += time        
                    end
                    # Record for this test itself
                    if tests_to_times[name].nil?
                        tests_to_times[name] = time
                    else
                        tests_to_times[name] += time        
                    end

                end
            end

            # Write out the test results to file
            folder = "#{Dir.pwd}/timing"
            Dir.mkdir(folder) unless File.exists?(folder)

            # By file
            File.open("#{Dir.pwd}/timing/test_by_file.html", 'w') do |html|
                html.puts '<table><tr><th>File Name</th><th>Time (min)</th></tr>'
                files_to_times.each do |f, t|
                    s = (t/60).round(1) # convert time from sec to min
                    html.puts "<tr><td>#{f}</td><td>#{s}</td></tr>"
                end
                html.puts '</table>'
            end

            # By name
            File.open("#{Dir.pwd}/timing/test_by_name.html", 'w') do |html|
                html.puts '<table><tr><th>Test Name</th><th>Time (min)</th></tr>'
                tests_to_times.each do |f, t|
                    s = (t/60).round(1) # convert time from sec to min
                    html.puts "<tr><td>#{f}</td><td>#{s}</td></tr>"
                end
                html.puts '</table>'
            end
        end

    end

    desc 'Run the NECB building creation tests'
    Rake::TestTask.new('necb-buildings') do |t|
        t.libs << 'test'
        t.test_files = FileList[
            'openstudio-standards/test/necb/test_necb_airloop_sizing_parameters.rb',
            'openstudio-standards/test/necb/test_necb_bldg_full_service_restaurant.rb',
            'openstudio-standards/test/necb/test_necb_bldg_high_rise_apartment.rb',
            'openstudio-standards/test/necb/test_necb_bldg_large_hotel.rb',
            'openstudio-standards/test/necb/test_necb_bldg_large_office.rb',
            'openstudio-standards/test/necb/test_necb_bldg_medium_office.rb',
            'openstudio-standards/test/necb/test_necb_bldg_midrise_apartment_office.rb',
            'openstudio-standards/test/necb/test_necb_bldg_outpatient.rb',
            'openstudio-standards/test/necb/test_necb_bldg_primary_school.rb',
            'openstudio-standards/test/necb/test_necb_bldg_quick_service_restaurant.rb',
            'openstudio-standards/test/necb/test_necb_bldg_retail_standalone.rb',
            'openstudio-standards/test/necb/test_necb_bldg_retail_stripmall.rb',
            'openstudio-standards/test/necb/test_necb_bldg_secondary_school.rb',
            'openstudio-standards/test/necb/test_necb_bldg_small_hotel.rb',
            'openstudio-standards/test/necb/test_necb_bldg_small_office.rb',
            'openstudio-standards/test/necb/test_necb_bldg_warehouse.rb',
            'openstudio-standards/test/necb/test_necb_boiler_rules.rb',
            'openstudio-standards/test/necb/test_necb_chiller_rules.rb', #42s
            'openstudio-standards/test/necb/test_necb_constructions_fdwr.rb', #19s
            'openstudio-standards/test/necb/test_necb_coolingtower_rules.rb',
            'openstudio-standards/test/necb/test_necb_default_spacetypes.rb', #30s
            'openstudio-standards/test/necb/test_necb_default_system_selection.rb',
            'openstudio-standards/test/necb/test_necb_fan_rules.rb',
            'openstudio-standards/test/necb/test_necb_heatpump_rules.rb',
            'openstudio-standards/test/necb/test_necb_hrv_rules.rb',
            'openstudio-standards/test/necb/test_necb_loop_rules.rb',
            'openstudio-standards/test/necb/test_necb_unitary_rules.rb',
            'openstudio-standards/test/necb/test_necb_waterheater_rules.rb',
            'openstudio-standards/test/necb/test_necb_weather.rb'
        ]
    end

    desc 'Run the NECB 2011 HVAC Tests'
    Rake::TestTask.new('necb-hvac') do |t|
        t.libs << 'test'
        t.test_files = FileList['openstudio-standards/test/necb/test_create_necb_hvac.rb']
    end

end

# Tasks to manage the spreadsheet data
namespace :data do

    require "#{File.dirname(__FILE__)}/data/standards/manage_OpenStudio_Standards.rb"
    desc 'Download OpenStudio_Standards from Google & export JSONs'
    task 'update' do
        download_google_spreadsheet
        export_spreadsheet_to_json
    end

    desc 'Export JSONs from OpenStudio_Standards'
    task 'update:manual' do
        export_spreadsheet_to_json
    end

end

require 'yard'
desc 'Generate the documentation'
YARD::Rake::YardocTask.new(:doc) do |t|
    Dir.chdir('../')
    t.stats_options = ['--list-undoc']
end

desc 'Show the documentation in a web browser'
task 'doc:show' => [:doc] do
    link = "#{Dir.pwd}/openstudio-standards/doc/index.html"
    if RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/
        system "start #{link}"
    elsif RbConfig::CONFIG['host_os'] =~ /darwin/
        system "open #{link}"
    elsif RbConfig::CONFIG['host_os'] =~ /linux|bsd/
        system "xdg-open #{link}"
    end
end

require 'rubocop/rake_task'
desc 'Check the code for style consistency'
RuboCop::RakeTask.new(:rubocop) do |t|
    # Make a folder for the output
    out_dir = 'openstudio-standards/.rubocop'
    Dir.mkdir(out_dir) unless File.exist?(out_dir)
    # Output both XML (CheckStyle format) and HTML
    t.options = ["--out=#{out_dir}/rubocop-results.xml", '--format=h', "--out=#{out_dir}/rubocop-results.html", '--format=offenses', "--out=#{out_dir}/rubocop-summary.txt"]
    t.requires = ['rubocop/formatter/checkstyle_formatter']
    t.formatters = ['RuboCop::Formatter::CheckstyleFormatter']
    # don't abort rake on failure
    t.fail_on_error = false
end
