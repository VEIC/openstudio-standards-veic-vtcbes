
require 'bundler/gem_tasks'
begin
  Bundler.setup
rescue Bundler::BundlerError => e
  $stderr.puts e.message
  $stderr.puts 'Run `bundle install` to install missing gems'
  exit e.status_code
end

require 'rake/testtask'
namespace :test do

  desc 'Run the weather file tests'
  Rake::TestTask.new('weather') do |t|
    t.libs << 'test'
    t.test_files = FileList['openstudio-standards/test/necb/test_weather.rb']
  end

  desc 'Run the compliance file tests'
  Rake::TestTask.new('compliance') do |t|
    t.libs << 'test'
    t.test_files = FileList['openstudio-standards/test/necb/test_compliance.rb']
  end

  desc 'Run CircleCI tests'
  Rake::TestTask.new('circleci') do |t|
    puts "Dir.pwd = #{Dir.pwd}"
    # Create a FileList for this task
    test_list = FileList.new
    # Read the parallelized list of tests
    # created by the circleci CLI in config.yml
    File.open("../node_tests.txt", "r") do |f|
      f.each_line do |line|
        # Skip comments the CLI may have included
        next unless line.include?('.rb')
        # Ensure the file exists
        pth = "test/#{line}"
        unless File.exist?(pth)
          puts "Skipped #{pth} because it does not exist"
          # next
        end
        # Add this test to the list
        test_list.add(pth)
        # puts "Added   #{line}"
      end
    end
    # Assign the tests to this task
    t.test_files = test_list
  end

  desc 'Run the NECB building creation tests'
  Rake::TestTask.new('necb-buildings') do |t|
    t.libs << 'test'
    t.test_files = FileList[
    'openstudio-standards/test/necb/test_necb_airloop_sizing_parameters.rb',
    'openstudio-standards/test/necb/test_necb_bldg_full_service_restaurant.rb',
    'openstudio-standards/test/necb/test_necb_bldg_high_rise_apartment.rb',
    'openstudio-standards/test/necb/test_necb_bldg_large_hotel.rb',
    'openstudio-standards/test/necb/test_necb_bldg_large_office.rb',
    'openstudio-standards/test/necb/test_necb_bldg_medium_office.rb',
    'openstudio-standards/test/necb/test_necb_bldg_midrise_apartment_office.rb',
    'openstudio-standards/test/necb/test_necb_bldg_outpatient.rb',
    'openstudio-standards/test/necb/test_necb_bldg_primary_school.rb',
    'openstudio-standards/test/necb/test_necb_bldg_quick_service_restaurant.rb',
    'openstudio-standards/test/necb/test_necb_bldg_retail_standalone.rb',
    'openstudio-standards/test/necb/test_necb_bldg_retail_stripmall.rb',
    'openstudio-standards/test/necb/test_necb_bldg_secondary_school.rb',
    'openstudio-standards/test/necb/test_necb_bldg_small_hotel.rb',
    'openstudio-standards/test/necb/test_necb_bldg_small_office.rb',
    'openstudio-standards/test/necb/test_necb_bldg_warehouse.rb',
    'openstudio-standards/test/necb/test_necb_boiler_rules.rb',
    'openstudio-standards/test/necb/test_necb_chiller_rules.rb', #42s
    'openstudio-standards/test/necb/test_necb_constructions_fdwr.rb', #19s
    'openstudio-standards/test/necb/test_necb_coolingtower_rules.rb',
    'openstudio-standards/test/necb/test_necb_default_spacetypes.rb', #30s
    'openstudio-standards/test/necb/test_necb_default_system_selection.rb',
    'openstudio-standards/test/necb/test_necb_fan_rules.rb',
    'openstudio-standards/test/necb/test_necb_heatpump_rules.rb',
    'openstudio-standards/test/necb/test_necb_hrv_rules.rb',
    'openstudio-standards/test/necb/test_necb_loop_rules.rb',
    'openstudio-standards/test/necb/test_necb_unitary_rules.rb',
    'openstudio-standards/test/necb/test_necb_waterheater_rules.rb',
    'openstudio-standards/test/necb/test_necb_weather.rb'
    ]
  end

  desc 'Run the NECB 2011 HVAC Tests'
  Rake::TestTask.new('necb-hvac') do |t|
    t.libs << 'test'
    t.test_files = FileList['openstudio-standards/test/necb/test_create_necb_hvac.rb']
  end

end

# Tasks to manage the spreadsheet data
namespace :data do

  require "#{File.dirname(__FILE__)}/data/standards/manage_OpenStudio_Standards.rb"
  desc 'Download OpenStudio_Standards from Google & export JSONs'
  task 'update' do
    download_google_spreadsheet
    export_spreadsheet_to_json
  end

  desc 'Export JSONs from OpenStudio_Standards'
  task 'update:manual' do
    export_spreadsheet_to_json
  end

end

require 'yard'
desc 'Generate the documentation'
YARD::Rake::YardocTask.new(:doc) do |t|
  Dir.chdir('../')
  t.stats_options = ['--list-undoc']
end

desc 'Show the documentation in a web browser'
task 'doc:show' => [:doc] do
  link = "#{Dir.pwd}/openstudio-standards/doc/index.html"
  if RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/
    system "start #{link}"
  elsif RbConfig::CONFIG['host_os'] =~ /darwin/
    system "open #{link}"
  elsif RbConfig::CONFIG['host_os'] =~ /linux|bsd/
    system "xdg-open #{link}"
  end
end

require 'rubocop/rake_task'
desc 'Check the code for style consistency'
RuboCop::RakeTask.new(:rubocop) do |t|
  # Make a folder for the output
  out_dir = 'openstudio-standards/.rubocop'
  Dir.mkdir(out_dir) unless File.exist?(out_dir)
  # Output both XML (CheckStyle format) and HTML
  t.options = ["--out=#{out_dir}/rubocop-results.xml", '--format=h', "--out=#{out_dir}/rubocop-results.html", '--format=offenses', "--out=#{out_dir}/rubocop-summary.txt"]
  t.requires = ['rubocop/formatter/checkstyle_formatter']
  t.formatters = ['RuboCop::Formatter::CheckstyleFormatter']
  # don't abort rake on failure
  t.fail_on_error = false
end